import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, ConversationHandler

from db import crud, get_db_session
from tg_bot.notification_sender import format_portfolio_message, create_portfolio_pie_chart
from tg_bot.states import PORTFOLIO_VIEW, START_ROUTES
from ..utils.keyboard_utils import get_main_keyboard

logger = logging.getLogger(__name__)

def show_portfolio(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–π) –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    if query: query.answer()

    user_tg = update.effective_user
    logger.info(f"User {user_tg.id} requested to view portfolio.")

    with get_db_session() as db:
        db_user = crud.get_user_by_telegram_id(db, user_tg.id)
        if not db_user:
             err_msg = "–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start."
             if query: query.edit_message_text(err_msg)
             else: update.message.reply_text(err_msg)
             return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        latest_portfolio = crud.get_latest_portfolio(db, db_user.id)

        if not latest_portfolio or not latest_portfolio.weights:
             no_portfolio_text = ("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.\n"
                                  "–Ø —Å–æ–æ–±—â—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω.")
             if db_user.risk_profile:
                  no_portfolio_text += "\n–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è."

             keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]]
             reply_markup = InlineKeyboardMarkup(keyboard)

             if query: query.edit_message_text(no_portfolio_text, reply_markup=reply_markup)
             else: update.message.reply_text(no_portfolio_text, reply_markup=reply_markup)
             return PORTFOLIO_VIEW

        # --- –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å ---
        try:
             # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
             message_text = format_portfolio_message(
                 weights=latest_portfolio.weights,
                 metrics=latest_portfolio.metrics,
                 is_initial=False,
                 significant_changes=False
             )
             message_text = f"üìä *–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å*\n_(–æ—Ç {latest_portfolio.created_at.strftime('%d.%m.%Y %H:%M')})_\n\n" + message_text

             chart_buf = create_portfolio_pie_chart(latest_portfolio.weights)

             keyboard = [
                  # [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data='portfolio_check_update')], # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞? –ü–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ–º
                  [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='main_settings')],
                  [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
             ]
             reply_markup = InlineKeyboardMarkup(keyboard)

             if query:
                 query.edit_message_text(message_text, parse_mode='Markdown', reply_markup=reply_markup)
                 if chart_buf:
                      context.bot.send_photo(chat_id=query.message.chat_id, photo=chart_buf)
             else:
                  if chart_buf:
                       context.bot.send_photo(chat_id=update.message.chat_id, photo=chart_buf,
                                              caption=message_text, parse_mode='Markdown', reply_markup=reply_markup)
                  else:
                       update.message.reply_text(message_text, parse_mode='Markdown', reply_markup=reply_markup)

             return PORTFOLIO_VIEW

        except Exception as e:
             logger.exception(f"Error formatting/sending portfolio for user {user_tg.id}: {e}")
             err_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è."
             if query: query.edit_message_text(err_msg, reply_markup=get_main_keyboard())
             else: update.message.reply_text(err_msg, reply_markup=get_main_keyboard())
             return START_ROUTES


def handle_portfolio_view_buttons(update: Update, context: CallbackContext):
     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ PORTFOLIO_VIEW."""
     # –°–µ–π—á–∞—Å —Ç—É—Ç –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –∫—Ä–æ–º–µ –æ–±—â–∏—Ö (–ù–∞–∑–∞–¥, –ù–∞—Å—Ç—Ä–æ–π–∫–∏),
     # –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ common.py –∏ settings.py –ø–æ –∏—Ö callback_data.
     # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫—Ç–∏–≤—É"), –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å.
     query = update.callback_query
     query.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
     logger.warning(f"Unhandled button in PORTFOLIO_VIEW: {query.data}")
     return PORTFOLIO_VIEW # –û—Å—Ç–∞–µ–º—Å—è –∑–¥–µ—Å—å


def get_portfolio_view_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è PORTFOLIO_VIEW."""
    # –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–≤–Ω–µ (–∏–∑ main_menu_handler)
    # –ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ *–ø–æ–¥* –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    return [
         CallbackQueryHandler(handle_portfolio_view_buttons)
    ]
