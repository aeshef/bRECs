import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, ConversationHandler

from db import crud, get_db_session, UserPreferences
from tg_bot.states import (SETTINGS_MAIN, SETTINGS_PREFERENCES, START_ROUTES, 
                           RISK_ASSESSMENT, DEACTIVATE_CONFIRM)
from .profile import start_risk_assessment

logger = logging.getLogger(__name__)

def deactivate_user(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_tg = update.effective_user
    logger.info(f"Deactivating user {user_tg.id}")

    with get_db_session() as db:
        try:
            crud.update_user_active_status(db, user_tg.id, False)
            query.edit_message_text(
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
                "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start."
            )
            return ConversationHandler.END 
        except Exception as e:
            logger.exception(f"Error deactivating user {user_tg.id}: {e}")
            query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            query.edit_message_reply_markup(reply_markup=get_settings_keyboard())
            return SETTINGS_MAIN

def get_deactivate_confirm_handlers():
    return [
        CallbackQueryHandler(deactivate_user, pattern='^confirm_deactivate_yes$'),
        CallbackQueryHandler(show_settings, pattern='^main_settings$')
    ]

def get_deactivate_confirm_handlers():
    return [
        CallbackQueryHandler(deactivate_user, pattern='^confirm_deactivate_yes$'),
        CallbackQueryHandler(show_settings, pattern='^main_settings$')
    ]

def get_settings_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    keyboard = [
        [InlineKeyboardButton("üéì –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å", callback_data='settings_change_profile')],
        [InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data='settings_change_prefs')],
        [InlineKeyboardButton("üîå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='settings_deactivate')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_preferences_keyboard():
     """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π."""
     keyboard = [
          # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è max_stocks, max_bonds, —Å–µ–∫—Ç–æ—Ä–æ–≤
          [InlineKeyboardButton("üöß(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) –ú–∞–∫—Å. –∞–∫—Ü–∏–π", callback_data='prefs_max_stocks')],
          [InlineKeyboardButton("üöß(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) –ú–∞–∫—Å. –æ–±–ª–∏–≥–∞—Ü–∏–π", callback_data='prefs_max_bonds')],
          [InlineKeyboardButton("üöß(–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) –ò—Å–∫–ª—é—á–∏—Ç—å —Å–µ–∫—Ç–æ—Ä—ã", callback_data='prefs_exclude_sectors')],
          [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='settings_show')]
     ]
     return InlineKeyboardMarkup(keyboard)

def show_settings(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    query = update.callback_query
    if query: query.answer()
    user_tg = update.effective_user
    logger.info(f"User {user_tg.id} entered settings.")

    with get_db_session() as db:
        db_user = crud.get_user_by_telegram_id(db, user_tg.id)
        if not db_user:
             err_msg = "–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start."
             if query: query.edit_message_text(err_msg)
             else: update.message.reply_text(err_msg)
             return ConversationHandler.END

        prefs = crud.get_user_preferences(db, db_user.id)

        profile_map = {
             "conservative": "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", "moderate": "–£–º–µ—Ä–µ–Ω–Ω—ã–π", "aggressive": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"
        }
        current_profile = profile_map.get(db_user.risk_profile, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

        settings_text = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n"
        settings_text += f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: *{current_profile}*\n\n"

        if prefs:
             settings_text += "*–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è:*\n"
             settings_text += f" ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ü–∏–π: {prefs.max_stocks}\n"
             settings_text += f" ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –æ–±–ª–∏–≥–∞—Ü–∏–π: {prefs.max_bonds}\n"
             if prefs.excluded_sectors:
                  settings_text += f" ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä—ã: {', '.join(prefs.excluded_sectors)}\n"
             if prefs.preferred_sectors:
                  settings_text += f" ‚Ä¢ –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ç–æ—Ä—ã: {', '.join(prefs.preferred_sectors)}\n"
        else:
             settings_text += "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–µ –∑–∞–¥–∞–Ω—ã.\n"

        message_args = {
             "text": settings_text,
             "reply_markup": get_settings_keyboard(),
             "parse_mode": "Markdown"
        }

        if query:
             query.edit_message_text(**message_args)
        else:
             update.message.reply_text(**message_args)

        return SETTINGS_MAIN


def handle_settings_main_action(update: Update, context: CallbackContext):
     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
     query = update.callback_query
     query.answer()
     data = query.data

     if data == 'settings_change_profile':
          query.edit_message_text(
               "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å.\n"
               "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
               reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞, –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='profile_restart_yes')],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='settings_show')]
               ])
          )
          return SETTINGS_MAIN
     elif data == 'settings_change_prefs':
          query.edit_message_text(
               "üîß *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
               reply_markup=get_preferences_keyboard(),
               parse_mode="Markdown"
          )
          return SETTINGS_PREFERENCES
     elif data == 'settings_deactivate':
          query = update.callback_query
          query.answer()
          keyboard = [
               [InlineKeyboardButton("üî¥ –î–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data='confirm_deactivate_yes')],
               [InlineKeyboardButton("üü¢ –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data='main_settings')] 
          ]
          query.edit_message_text(
               "‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç?*\n\n"
               "–í—ã –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è.\n"
               "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞–≤ /start.",
               reply_markup=InlineKeyboardMarkup(keyboard),
               parse_mode='Markdown'
          )
          return DEACTIVATE_CONFIRM 
     elif data == 'settings_show':
          return show_settings(update, context)
     elif data == 'profile_restart_yes':
          return start_risk_assessment(update, context)
     else:
          logger.warning(f"Unknown settings action: {data}")
          return SETTINGS_MAIN

def handle_settings_preferences_action(update: Update, context: CallbackContext):
     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π."""
     query = update.callback_query
     query.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
     # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è max_stocks, max_bonds, —Å–µ–∫—Ç–æ—Ä–æ–≤
     # –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ MessageHandler)
     # –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.
     logger.warning(f"Unhandled preferences action: {query.data}")
     return SETTINGS_PREFERENCES

def get_settings_main_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è SETTINGS_MAIN."""
    return [
        CallbackQueryHandler(handle_settings_main_action, pattern='^settings_|^profile_restart_yes$'),
    ]

def get_settings_preferences_handlers():
     """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è SETTINGS_PREFERENCES."""
     return [
          CallbackQueryHandler(handle_settings_preferences_action, pattern='^prefs_'),
          CallbackQueryHandler(show_settings, pattern='^settings_show$'),
     ]

